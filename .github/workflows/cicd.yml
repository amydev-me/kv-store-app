name: CICD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

    - name: Copy .env.example to .env
      run: cp .env.example .env

    - name: Set environment variables
      run: |
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=${{ secrets.TESTING_DB_HOST }}" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=${{ secrets.TESTING_DB_DATABASE }}" >> .env
        echo "DB_USERNAME=${{ secrets.TESTING_DB_USERNAME }}" >> .env
        echo "DB_PASSWORD=${{ secrets.TESTING_DB_PASSWORD }}" >> .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Run tests and collect coverage
      run: vendor/bin/phpunit --coverage-clover coverage.xml .

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml

  deploy: 
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:

    - name: Checkout source code
      uses: actions/checkout@v2
    
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Compress application
      run: zip -r deploy.zip . -x '*.git*'
  
    - name: Upload to S3
      run: |
        aws s3 cp deploy.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy-v${{ github.run_number }}.zip

    - name: Deploy to Elastic Beanstalk
      run: |
        aws elasticbeanstalk create-application-version --application-name ${{ secrets.EB_APPLICATION_NAME }} --version-label v${{ github.run_number }} --source-bundle S3Bucket="${{ secrets.S3_BUCKET_NAME }}",S3Key="deploy-v${{ github.run_number }}.zip"
        aws elasticbeanstalk update-environment --environment-name ${{ secrets.EB_ENVIRONMENT_NAME }} --version-label v${{ github.run_number }}